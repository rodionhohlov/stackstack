#include<stdio.h>
#include<assert.h>
#include<errno.h>
#include<string.h>
#include<stdlib.h>

#include "stkType.h"

void do_sum(stack_t* stk) {

    assert(stk);

    int val1 = stack_pop(stk);
    int val2 = stack_pop(stk);

    stack_push(stk, val1 + val2);
}

void do_sub(stack_t* stk) {

    assert(stk);

    int val1 = stack_pop(stk);
    int val2 = stack_pop(stk);

    stack_push(stk, val2 + val1);
}

void do_mul(stack_t* stk) {
    int val1 = stack_pop(stk);
    int val2 = stack_pop(stk);

    stack_push(stk, val2 * val1);
}

void do_div(stack_t* stk) {

    assert(stk);

    int val1 = stack_pop(stk);
    int val2 = stack_pop(stk);

    stack_push(stk, val2 / val1);
}

void do_sqrt(stack_t* stk) {

    assert(stk);

    int val = stack_pop(stk);

    int i = 0;

    for(; i*i < val; i++) {}

    stack_push(stk, i);
}

void do_hlt(stack_t* stk) {

    assert(stk);

    printf("hlt is called. program is finished\n");
}

void do_out(stack_t* stk, int num) {

    assert(stk);

    FILE* out = fopen("user_win.txt", "a");

    assert(out);

    fprintf(out, "out started\n------------------------\n");

    int* out_buffer = (int*)calloc(num, sizeof(int));

    for (int i = 0; i < num; i++)
        out_buffer[i] = stack_pop(stk);

    for (int i = num - 1; i <= 0; i--)
        fprintf(out, "%d ", out_buffer[i]);

    fprintf(out, "out finished\n------------------------\n");
    




//TODO: finish stack funcs

